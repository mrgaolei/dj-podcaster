# Generated by Django 2.1.15 on 2021-06-02 16:19

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='类目')),
                ('subText', models.CharField(blank=True, max_length=255, verbose_name='子类目')),
            ],
        ),
        migrations.CreateModel(
            name='CloudStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField(choices=[(1, '七牛'), (2, '阿里云OSS')], default=1, verbose_name='类型')),
                ('name', models.CharField(max_length=100, verbose_name='存储命名')),
                ('domain', models.URLField(help_text='需要包含http或者https部分', verbose_name='站点域名')),
                ('bucket', models.CharField(max_length=255, verbose_name='Bucket')),
                ('access_key', models.CharField(max_length=255, verbose_name='Access Key')),
                ('secret_key', models.CharField(max_length=255, verbose_name='Secret Key')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '云存储',
                'verbose_name_plural': '云存储',
            },
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(help_text='http://feed.tangsuanradio.com/*.xml', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='文件名')),
                ('domain', models.URLField(blank=True, help_text='自定义域名会覆盖系统默认域名', verbose_name='自定义域名')),
                ('display_num', models.SmallIntegerField(default=100, verbose_name='节目展示数')),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=255)),
                ('its_summary', models.CharField(max_length=255)),
                ('its_author', models.CharField(max_length=255)),
                ('its_image', models.ImageField(upload_to='feed', verbose_name='播客封面')),
                ('its_owner_name', models.CharField(max_length=255)),
                ('its_owner_email', models.EmailField(max_length=254)),
                ('its_subtitle', models.CharField(max_length=255)),
                ('its_keywords', models.CharField(max_length=255)),
                ('its_category', models.CharField(max_length=255)),
                ('its_subcategory', models.CharField(blank=True, max_length=255)),
                ('its_categories', models.TextField(default='', verbose_name='播客分类xml')),
                ('copyright', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('admins', models.ManyToManyField(help_text='管理员拥有全部Feed发布权', to=settings.AUTH_USER_MODEL, verbose_name='可发布人')),
            ],
            options={
                'verbose_name': '播客',
                'verbose_name_plural': '播客',
            },
        ),
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('duration', models.DurationField(default='01:10:10', help_text='请按照［01:15:21］格式输入', verbose_name='时长')),
                ('enclosure_url', models.URLField(verbose_name='节目URL')),
                ('enclosure_len', models.IntegerField(help_text='单位：字节', verbose_name='文件大小')),
                ('enclosure_type', models.SmallIntegerField(choices=[(1, 'audio/mpeg'), (2, 'audio/x-m4a'), (3, 'video/mp4'), (4, 'video/x-m4v'), (5, 'video/quicktime')], default=2)),
                ('its_image', models.ImageField(upload_to='podcast', verbose_name='节目封面')),
                ('its_subtitle', models.TextField(verbose_name='子标题')),
                ('its_summary', tinymce.models.HTMLField(help_text='从iOS 9起,描述支持简单HTML', verbose_name='描述')),
                ('its_author', models.CharField(max_length=100, verbose_name='艺人')),
                ('its_explicit', models.SmallIntegerField(choices=[(0, 'clean'), (1, 'yes'), (2, 'no')], default=0, help_text='脏标。如果为Yes，则18岁以下用户无法看到该节目')),
                ('active', models.BooleanField(default=True, verbose_name='上线')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('pubdate', models.DateTimeField(default=datetime.datetime(2021, 6, 3, 0, 19, 14, 678903), verbose_name='发布时间')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='发布人')),
                ('feeds', models.ManyToManyField(to='podcast.Feed')),
            ],
            options={
                'verbose_name': '节目',
                'verbose_name_plural': '节目',
                'ordering': ['-pubdate'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='cloudstorage',
            unique_together={('owner', 'name')},
        ),
    ]
